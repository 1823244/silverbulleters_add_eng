{3,
{46,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0,1,0},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3},0,"","",0,1,"",0,0,0,0,0,0,3,3,0,0,0,100,1,1,0},"
///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//пример вызова Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВМетаданныхЕстьСправочник(Парам01)"",""ВМетаданныхЕстьСправочник"",""в метаданных есть Справочник """"Справочник1"""""",
		""Проверяет наличие справочника в метаданных ИБ"", ""Данные"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯУдаляюВсеЭлементыСправочника(Парам01)"",""ЯУдаляюВсеЭлементыСправочника"",""я удаляю все элементы Справочника """"Справочник1"""""",
		""Удаляются все элементы справочника"", ""Данные"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВБазеНетЭлементовСправочника(Парам01)"",""ВБазеНетЭлементовСправочника"",""в базе нет элементов Справочника """"Справочник1"""""", 
		""Проверяет отсутствие элементов справочника"", ""Данные"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯСоздаюСамОдинЭлементСправочника(Парам01)"",""ЯСоздаюСамОдинЭлементСправочника"",""я создаю сам один элемент справочника """"Справочник1"""""",
		""Создает один элемент справочника с именем """"Созданный элемент 1"""""", ""Данные"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВБазеПоявилсяХотяБыОдинЭлементСправочника(Парам01)"",""ВБазеПоявилсяХотяБыОдинЭлементСправочника"",""В базе появился хотя бы один элемент справочника """"Справочник1"""""",
		""Проверяет наличие хотя бы одного элемента в справочнике"", ""Данные"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВБазеНетЭлементовСправочникаСУказаннымиВТаблицеНаименованиями(Парам01,ТабПарам)"",""ВБазеНетЭлементовСправочникаСУказаннымиВТаблицеНаименованиями"",""И в базе нет элементов справочника """"Справочник1"""" с указанными в таблице наименованиями"",
		""Проверяет наличе в базе элементов справочника по наименованиям в таблице при их наличии удаляет"",""Данные"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯСоздаюЭлементыСправочникаСУказаннымиВТаблицеНаименованиями(Парам01,ТабПарам)"",""ЯСоздаюЭлементыСправочникаСУказаннымиВТаблицеНаименованиями"",""И  Я создаю элементы справочника """"Справочник1"""" с указанными в таблице наименованиями"",
		""Создает элементы справочник по наименованием в таблице"",""Данные"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВБазеЕстьЭлементыСправочникаСУказаннымиВТаблицеНаименованиями(Парам01,ТабПарам)"",""ВБазеЕстьЭлементыСправочникаСУказаннымиВТаблицеНаименованиями"",""И в базе есть элементы справочника """"Справочник1"""" с указанными в таблице наименованиями"",
		""Проверяет наличе в базе элементов справочника по наименованиям в таблице"",""Данные"");
	

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции

///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры

//////////

&НаСервереБезКонтекста
Функция ВМетаданныхЕстьСправочникСервер(ВидСправочника)
	Нашел = Ложь;
	Для каждого Элем Из Метаданные.Справочники Цикл
		Имя = Элем.Имя;
		Если НРег(Имя) = НРег(ВидСправочника) Тогда
			Нашел = Истина;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Нашел; 
КонецФункции	

&НаСервереБезКонтекста
Процедура ЯУдаляюВсеЭлементыСправочникаСервер(ВидСправочника)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		""ВЫБРАТЬ
		|	Справочник1.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Справочник1 КАК Справочник1
		|
		|УПОРЯДОЧИТЬ ПО
		|	Справочник1.ЭтоГруппа"";

		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,""Справочник1"",ВидСправочника);	
	Результат = Запрос.Выполнить();

	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СпрОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Попытка
			СпрОбъект.Удалить();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВБазеНетЭлементовСправочникаСервер(ВидСправочника)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		""ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Справочник1.Ссылка) КАК КолЭлементов
		|ИЗ
		|	Справочник.Справочник1 КАК Справочник1"";

	Запрос.Текст = СтрЗаменить(Запрос.Текст,""Справочник1"",ВидСправочника);	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.КолЭлементов;
	КонецЦикла;
КонецФункции	

&НаСервереБезКонтекста
Процедура ЯСоздаюОдинЭлементСправочникаСервер(ВидСправочника, Наименование)
	СпрОбъект = Справочники[ВидСправочника].СоздатьЭлемент();
	СпрОбъект.Наименование = Наименование;
	СпрОбъект.Записать();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВБазеПоявилсяХотяБыОдинЭлементСправочникаСервер(ВидСправочника)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		""ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Справочник1.Ссылка) КАК КолЭлементов
		|ИЗ
		|	Справочник.Справочник1 КАК Справочник1"";

	Запрос.Текст = СтрЗаменить(Запрос.Текст,""Справочник1"",ВидСправочника);	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.КолЭлементов;
	КонецЦикла;
КонецФункции	

&НаСервереБезКонтекста
Процедура УдалитьЭлементСправочникаЕслиОнЕсть(ВидСправочника,Наименование)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		""ВЫБРАТЬ
		|	Справочник1.Ссылка
		|ИЗ
		|	Справочник.Справочник1 КАК Справочник1
		|ГДЕ
		|	Справочник1.Наименование = &Наименование"";
		
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,""Справочник1"",ВидСправочника);	
	Запрос.УстановитьПараметр(""Наименование"", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СпрОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Сообщить(""Удаляю элемент справочника <"" + ВидСправочника + ""> : <"" + СпрОбъект.Наименование + "">"");
		СпрОбъект.Удалить();
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиСправочникаЕслиОнЕсть(ВидСправочника,Наименование)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		""ВЫБРАТЬ
		|	Справочник1.Ссылка
		|ИЗ
		|	Справочник.Справочник1 КАК Справочник1
		|ГДЕ
		|	Справочник1.Наименование = &Наименование"";
		
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,""Справочник1"",ВидСправочника);	
	Запрос.УстановитьПараметр(""Наименование"", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество()> 0 Тогда
	
		Возврат Истина;
	
	КонецЕсли; 
	
КонецФункции	


///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//в метаданных есть Справочник ""Справочник1""
//@ВМетаданныхЕстьСправочник(Парам01)
Процедура ВМетаданныхЕстьСправочник(ВидСправочника) Экспорт
	Нашел = ВМетаданныхЕстьСправочникСервер(ВидСправочника);
	
	Ванесса.ПроверитьРавенство(Нашел,Истина,""В метаданных есть вид справочника "" + ВидСправочника);
КонецПроцедуры

&НаКлиенте
//я удаляю все элементы Справочника ""Справочник1""
//@ЯУдаляюВсеЭлементыСправочника(Парам01)
Процедура ЯУдаляюВсеЭлементыСправочника(ВидСправочника) Экспорт
	ЯУдаляюВсеЭлементыСправочникаСервер(ВидСправочника);
КонецПроцедуры

&НаКлиенте
//в базе нет элементов Справочника ""Справочник1""
//@ВБазеНетЭлементовСправочника(Парам01)
Процедура ВБазеНетЭлементовСправочника(ВидСправочника) Экспорт
	КолЭлементов = ВБазеНетЭлементовСправочникаСервер(ВидСправочника);
	Ванесса.ПроверитьРавенство(КолЭлементов,0,""Не должно быть элементов"");
КонецПроцедуры

&НаКлиенте
//я создаю сам один элемент справочника ""Справочник1""
//@ЯСоздаюСамОдинЭлементСправочника(Парам01)
Процедура ЯСоздаюСамОдинЭлементСправочника(ВидСправочника) Экспорт
	Наименование = ""Созданный элемент 1"";
	ЯСоздаюОдинЭлементСправочникаСервер(ВидСправочника, Наименование);
КонецПроцедуры

&НаКлиенте
//В базе появился хотя бы один элемент справочника ""Справочник1""
//@ВБазеПоявилсяХотяБыОдинЭлементСправочника(Парам01)
Процедура ВБазеПоявилсяХотяБыОдинЭлементСправочника(ВидСправочника) Экспорт
	КолЭлементов = ВБазеПоявилсяХотяБыОдинЭлементСправочникаСервер(ВидСправочника);
	Ванесса.ПроверитьНеРавенство(КолЭлементов,0,""В базе должны быть элементы"");
КонецПроцедуры

&НаКлиенте
//Дано в базе нет элементов справочника ""Справочник1"" с указанными в таблице наименованиями
//@ВБазеНетЭлементовСправочникаСУказаннымиВТаблицеНаименованиями(Парам01,ТабПарам)
Процедура ВБазеНетЭлементовСправочникаСУказаннымиВТаблицеНаименованиями(ВидСправочника,ТабПарам) Экспорт
	Для Каждого СтрокаТаблицы Из ТабПарам Цикл
		УдалитьЭлементСправочникаЕслиОнЕсть(ВидСправочника,СтрокаТаблицы.Кол1);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
//Тогда в базе есть элементы справочника ""Справочник1"" с указанными в таблице наименованиями
//@ВБазеЕстьЭлементыСправочникаСУказаннымиВТаблицеНаименованиями(Парам01,ТабПарам)
Процедура ВБазеЕстьЭлементыСправочникаСУказаннымиВТаблицеНаименованиями(ВидСправочника,ТабПарам) Экспорт
	ЭлементСуществует = Ложь;
	Для Каждого СтрокаТаблицы Из ТабПарам Цикл
		ЭлементСуществует = НайтиСправочникаЕслиОнЕсть(ВидСправочника,СтрокаТаблицы.Кол1);
		Если НЕ ЭлементСуществует Тогда
			ВызватьИсключение(""Значение "" + СтрокаТаблицы.Кол1 + "" в справочнике "" + ВидСправочника + "" не существует!"");		
		КонецЕсли; 
	КонецЦикла
КонецПроцедуры

&НаКлиенте
//И  Я создаю элементы справочника ""Справочник1"" с указанными в таблице наименованиями
//@ЯСоздаюЭлементыСправочникаСУказаннымиВТаблицеНаименованиями(Парам01,ТабПарам)
Процедура ЯСоздаюЭлементыСправочникаСУказаннымиВТаблицеНаименованиями(ВидСправочника,ТабПарам) Экспорт
	Для Каждого СтрокаТаблицы Из ТабПарам Цикл
		ЯСоздаюОдинЭлементСправочникаСервер(ВидСправочника,СтрокаТаблицы.Кол1);
	КонецЦикла;
КонецПроцедуры
",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",503de865-4645-4496-b5dd-2e4a76236095}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0},0,0}