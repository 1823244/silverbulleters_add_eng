{3,
{46,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0,1,0},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3},0,"","",0,1,"",0,0,0,0,0,0,3,3,0,0,0,100,1,1,0},"
#Область Служебные_функции_и_процедуры

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//пример вызова Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ПеременнаяСоответствуетРегулярномуВыражению(Парам01,Парам02)"",""ПеременнаяСоответствуетРегулярномуВыражению"",""Тогда переменная """"ПроверяемаяСтрока"""" соответствует регулярному выражению """"\d\d\d"""""","""",""Регулярные выражения"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯЗапоминаюСтрокуКакПеременную(Парам01,Парам02)"",""ЯЗапоминаюСтрокуКакПеременную"",""Когда Я запоминаю строку """"Привет"""" как переменную """"ПроверяемаяСтрока"""""","""",""Контекст.Контекст.Сохранить значение"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ПеременнаяСоответствуетПростомуШаблону(Парам01,Парам02)"",""ПеременнаяСоответствуетПростомуШаблону"",""Тогда переменная """"ПроверяемаяСтрока"""" соответствует простому шаблону """"*ри*"""""","""",""Регулярные выражения"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ПеременнаяНеСоответствуетРегулярномуВыражению(Парам01,Парам02)"",""ПеременнаяНеСоответствуетРегулярномуВыражению"",""Тогда переменная """"ПроверяемаяСтрока"""" не соответствует регулярному выражению """"\d{4}"""""","""",""Регулярные выражения"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ПеременнаяНеСоответствуетПростомуШаблону(Парам01,Парам02)"",""ПеременнаяНеСоответствуетПростомуШаблону"",""Тогда переменная """"ПроверяемаяСтрока"""" не соответствует простому шаблону """"*ДругойТекст*"""""","""",""Регулярные выражения"");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции

#КонецОбласти



#Область Работа_со_сценариями

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры

#КонецОбласти


///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Когда Я запоминаю строку ""Привет"" как переменную ""ПроверяемаяСтрока""
//@ЯЗапоминаюСтрокуКакПеременную(Парам01,Парам02)
Процедура ЯЗапоминаюСтрокуКакПеременную(ИсходнаяСтрока, ИмяПеременной) Экспорт
	Контекст.Вставить(ИмяПеременной, ИсходнаяСтрока);
КонецПроцедуры

&НаКлиенте
//Тогда переменная ""ПроверяемаяСтрока"" соответствует регулярному выражению ""/d/d/d""
//@ПеременнаяСоответствуетРегулярномуВыражению(Парам01,Парам02)
Процедура ПеременнаяСоответствуетРегулярномуВыражению(ИмяПеременной, ШаблонРегулярки) Экспорт
	
	ПроверяемаяСтрока = """";
	
	Нашли = ПеременнаяСоответствуетРегулярномуВыражениюВнутр(ИмяПеременной, ШаблонРегулярки, ПроверяемаяСтрока);
	
	Ожидаем = Ванесса.Плагин(""УтвержденияBDD"");
	Ожидаем.Что(Нашли, 
		СтрШаблон(""Ожидали, что проверяемая строка из переменной совпадает с шаблоном регулярного выражения, а это не так
		|Регулярное выражение %1
		|Имя переменной %2
		|Проверяемая строка:
		|%3"", ШаблонРегулярки, ИмяПеременной, ПроверяемаяСтрока))
		.ЭтоИстина();
КонецПроцедуры

&НаКлиенте
//Тогда переменная ""ПроверяемаяСтрока"" не соответствует регулярному выражению ""\d{4}""
//@ПеременнаяНеСоответствуетРегулярномуВыражению(Парам01,Парам02)
Процедура ПеременнаяНеСоответствуетРегулярномуВыражению(ИмяПеременной, ШаблонРегулярки) Экспорт
	
	ПроверяемаяСтрока = """";
	
	Нашли = ПеременнаяСоответствуетРегулярномуВыражениюВнутр(ИмяПеременной, ШаблонРегулярки, ПроверяемаяСтрока);
	
	Ожидаем = Ванесса.Плагин(""УтвержденияBDD"");
	Ожидаем.Что(Нашли, 
		СтрШаблон(""Ожидали, что проверяемая строка не совпадает с шаблоном регулярного выражения, а она совпадает, что неверно
		|Регулярное выражение %1
		|Имя переменной %2
		|Проверяемая строка:
		|%3"", ШаблонРегулярки, ИмяПеременной, ПроверяемаяСтрока))
		.ЭтоЛожь();
КонецПроцедуры

&НаКлиенте
//Тогда переменная ""ПроверяемаяСтрока"" соответствует простому шаблону ""*ри*""
//@ПеременнаяСоответствуетПростомуШаблону(Парам01,Парам02)
Процедура ПеременнаяСоответствуетПростомуШаблону(ИмяПеременной, ШаблонРегулярки) Экспорт
	
	ПроверяемаяСтрока = """";
	Нашли = ПеременнаяСоответствуетПростомуШаблонуВнутр(ИмяПеременной, ШаблонРегулярки, ПроверяемаяСтрока);
	
	Ожидаем = Ванесса.Плагин(""УтвержденияBDD"");
	Ожидаем.Что(Нашли, 
		СтрШаблон(""Ожидали, что проверяемая строка совпадает с шаблоном регулярного выражения, а это не так
		|Шаблон проверки %1
		|Имя переменной %2
		|Проверяемая строка:
		|%3"", ШаблонРегулярки, ИмяПеременной, ПроверяемаяСтрока))
		.ЭтоИстина();
КонецПроцедуры

&НаКлиенте
//Тогда переменная ""ПроверяемаяСтрока"" не соответствует простому шаблону ""*ДругойТекст*""
//@ПеременнаяНеСоответствуетПростомуШаблону(Парам01,Парам02)
Процедура ПеременнаяНеСоответствуетПростомуШаблону(ИмяПеременной, ШаблонРегулярки) Экспорт
	ПроверяемаяСтрока = """";
	Нашли = ПеременнаяСоответствуетПростомуШаблонуВнутр(ИмяПеременной, ШаблонРегулярки, ПроверяемаяСтрока);
	
	Ожидаем = Ванесса.Плагин(""УтвержденияBDD"");
	Ожидаем.Что(Нашли, 
		СтрШаблон(""Ожидали, что проверяемая строка не совпадает с простым шаблоном, а она совпадает, что неверно
		|Шаблон проверки %1
		|Имя переменной %2
		|Проверяемая строка:
		|%3"", ШаблонРегулярки, ИмяПеременной, ПроверяемаяСтрока))
		.ЭтоЛожь();
КонецПроцедуры

&НаКлиенте
Функция ПеременнаяСоответствуетРегулярномуВыражениюВнутр(ИмяПеременной, ШаблонРегулярки, ПроверяемаяСтрока)
	
	РегулярныеВыражения = Ванесса.Плагин(""РегулярныеВыражения"");
	РегулярныеВыражения.Подготовить(ШаблонРегулярки);
	
	ПроверяемаяСтрока = Контекст[ИмяПеременной];
	
	Нашли = РегулярныеВыражения.Совпадает(ПроверяемаяСтрока);
	
	Возврат Нашли;
КонецФункции

&НаКлиенте
Функция ПеременнаяСоответствуетПростомуШаблонуВнутр(ИмяПеременной, ШаблонРегулярки, ПроверяемаяСтрока)
	
	РегулярныеВыражения = Ванесса.Плагин(""РегулярныеВыражения"");
	
	ПроверяемаяСтрока = Контекст[ИмяПеременной];
	
	Нашли = РегулярныеВыражения.СтрокаСоответствуетШаблону(ПроверяемаяСтрока, ШаблонРегулярки);
	
	Возврат Нашли;
КонецФункции
",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",503de865-4645-4496-b5dd-2e4a76236095}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0},0,0}