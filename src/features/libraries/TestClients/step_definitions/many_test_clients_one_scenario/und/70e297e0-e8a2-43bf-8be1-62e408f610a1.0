{3,
{46,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0,1,0},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3},0,"","",0,1,"",0,0,0,0,0,0,3,3,0,0,0,100,1,1,0},"//начало текста модуля

#Область Служебные_функции_и_процедуры

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯУдаляюПользователя(ИмяПользователя)"",""ЯУдаляюПользователя"",""Когда Я удаляю пользователя """"ИмяПользователя"""""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВБазеЕстьПользовательСПаролем(Парам01,Парам02)"",""ВБазеЕстьПользовательСПаролем"",""Когда в базе есть пользователь """"VanessaUser1"""" с паролем """"1"""""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВБазеЕстьПользовательСПаролемСЯзыком(Парам01,Парам02,Парам03)"",""ВБазеЕстьПользовательСПаролемСЯзыком"",""Когда в базе есть пользователь """"VanessaUser1"""" с паролем """"1"""" с языком """"en"""""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЗаполняюСписокТаблицыДанныеКлиентовТестирования()"",""ЗаполняюСписокТаблицыДанныеКлиентовТестирования"",""И    заполняю список таблицы ДанныеКлиентовТестирования"");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции

#КонецОбласти

#Область Работа_со_сценариями

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры

#КонецОбласти


///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Дано в базе есть пользователь ""User1"" с паролем ""1""
//@ВБазеЕстьПользовательСПаролем(Парам01,Парам02)
Процедура ВБазеЕстьПользовательСПаролем(Логин, Пароль) Экспорт
	
	СоздатьПользоваталяИБНаСервере(Логин, Пароль);
	
	//Если НЕ КонтекстСохраняемый.Свойство(""ВремяНачалаТестирования"") Тогда
	//	КонтекстСохраняемый.Вставить(""ВремяНачалаТестирования"", ТекущаяДата());
	//КонецЕсли;	 
	//
	//ВремяНачалаТестирования = КонтекстСохраняемый.ВремяНачалаТестирования;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПользоваталяИБНаСервере(Логин, Пароль,Язык = Неопределено)

	Если ПользователиИнформационнойБазы.НайтиПоИмени(Логин) = Неопределено Тогда
		Пользователь = ПользователиИнформационнойБазы.СоздатьПользователя();
		Пользователь.Имя    = Логин;
		Пользователь.Пароль = Пароль;
		Пользователь.Роли.Добавить(Метаданные.Роли.Админ);
		Пользователь.АутентификацияСтандартная = Истина;
		Пользователь.ПоказыватьВСпискеВыбора = Истина;
		Если Язык <> Неопределено Тогда
			Пользователь.Язык = Метаданные.Языки.Найти(Язык);
		КонецЕсли;	 
		Пользователь.Записать();
	КонецЕсли;

КонецПроцедуры

//окончание текста модуля

&НаКлиенте
//Когда Я удаляю пользователя ""VanessaUser1""
//@ЯУдаляюПользователя(ИмяПользователя)
Процедура ЯУдаляюПользователя(ИмяПользователя) Экспорт
	
	//Если НЕ КонтекстСохраняемый.Свойство(""ВремяНачалаТестирования"") Тогда
	//	КонтекстСохраняемый.Вставить(""ВремяНачалаТестирования"", ТекущаяДата());
	//КонецЕсли;	 
	//
	//ВремяНачалаТестирования = КонтекстСохраняемый.ВремяНачалаТестирования;
	
	ЯУдаляюПользователяНаСервере(ИмяПользователя);
	
КонецПроцедуры

&НаСервере
Процедура ЯУдаляюПользователяНаСервере(ИмяПользователя)

	НайденыйПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	Если НайденыйПользователь <> Неопределено Тогда
		НайденыйПользователь.Удалить();
	КонецЕсли;	 

КонецПроцедуры

&НаКлиенте
//И    заполняю список таблицы ДанныеКлиентовТестирования
//@ЗаполняюСписокТаблицыДанныеКлиентовТестирования()
Процедура ЗаполняюСписокТаблицыДанныеКлиентовТестирования() Экспорт
	ДанныеКлиентовТестирования = Ванесса.ДанныеКлиентовТестирования;
	ДанныеКлиентовТестирования.Очистить();
	ЗаполнитьДанныеТекущейИнфобазы();

	ЭтоLinux = Ложь;
	СисИнфо = Новый СистемнаяИнформация;
	Если Найти(Строка(СисИнфо.ТипПлатформы), ""Linux"")>0 Тогда 
		ЭтоLinux = Истина;
	КонецЕсли;
	
	Стр = ДанныеКлиентовТестирования.Добавить();
	Стр.Имя = ""VanessaUser1"";
	Стр.Подключен = Ложь;
	КаталогБазы = СтрокаСоединенияИнформационнойБазы();
	Если Найти(ВРег(КаталогБазы),ВРег(""File="")) = 0 Тогда
		Стр.Серверная = Истина;
	КонецЕсли;
	
	//СтрокаЗапуска1с = КаталогПрограммы() + ""1cv8c"";
	//Если ЭтоLinux = Ложь Тогда
	//	СтрокаЗапуска1с = СтрокаЗапуска1с + "".exe"";
	//КонецЕсли;
	//
	//Стр.ПутьКПлатформе = СтрокаЗапуска1с;
	Стр.ПутьКИнфобазе  = КаталогБазы;
	Стр.ПортЗапускаТестКлиента = Ванесса.ПроверитьПортНаЗанятость(48011);
	
	Стр = ДанныеКлиентовТестирования.Добавить();
	Стр.Имя = ""VanessaUser2"";
	Стр.Подключен = Ложь;
	КаталогБазы = СтрокаСоединенияИнформационнойБазы();
	Если Найти(ВРег(КаталогБазы),ВРег(""File="")) = 0 Тогда
		Стр.Серверная = Истина;
	КонецЕсли;
	
	//СтрокаЗапуска1с = КаталогПрограммы() + ""1cv8c"";
	//Если ЭтоLinux = Ложь Тогда
	//	СтрокаЗапуска1с = СтрокаЗапуска1с + "".exe"";
	//КонецЕсли;
	//
	//Стр.ПутьКПлатформе = СтрокаЗапуска1с;
	Стр.ПутьКИнфобазе  = КаталогБазы;
	Стр.ПортЗапускаТестКлиента = Ванесса.ПроверитьПортНаЗанятость(48012);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеТекущейИнфобазы()
	
	ДанныеТекущейИнфобазы = Новый Структура;
	ДанныеТекущейИнфобазы.Вставить(""Имя"", ""Этот клиент"");
	
	КаталогБазы = СтрокаСоединенияИнформационнойБазы();
	
	ДанныеТекущейИнфобазы.Вставить(""ТипКлиента"",     ""Тонкий"");
	ДанныеТекущейИнфобазы.Вставить(""ПутьКИнфобазе"",  КаталогБазы);
	
	//СвободныйПорт = ПроверитьПортНаЗанятость(1538);
	СвободныйПорт = 1538;//надо так, иначе не подключается уже запущенный TestClient, если была переоткрыта VB
	
	ДанныеТекущейИнфобазы.Вставить(""ПортЗапускаТестКлиента"", СвободныйПорт);	
	
	НоваяСтрока = Ванесса.ДанныеКлиентовТестирования.Вставить(0);// этот клиент должен быть первым
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеТекущейИнфобазы);
	
КонецПроцедуры


&НаКлиенте
//Дано в базе есть пользователь ""User1"" с паролем ""1""
//@ВБазеЕстьПользовательСПаролем(Парам01,Парам02)
Процедура ВБазеЕстьПользовательСПаролемСЯзыком(Логин, Пароль,Язык) Экспорт
	СоздатьПользоваталяИБНаСервере(Логин, Пароль,Язык);
КонецПроцедуры

",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",1fa267af-3d54-4f70-ac00-718486d7aafd}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0},0,0}