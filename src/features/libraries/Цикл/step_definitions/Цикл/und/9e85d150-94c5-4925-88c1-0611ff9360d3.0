{3,
{46,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0,1,0},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3},0,"","",0,1,"",0,0,0,0,0,0,3,3,0,0,0,100,1,1,0},"
///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//пример вызова Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ПокаВыражениеВстроенногоЯзыкаИстинноТогда(Парам01)"",""ПокаВыражениеВстроенногоЯзыкаИстинноТогда"",""И Пока выражение встроенного языка """"Контекст.СлужебнаяПеременная < 2"""" истинно тогда"",""Цикл. Выполняет шаги пока истинно условие"",""Встроенный язык"",""Цикл"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ДляКаждойСтрокиТаблицыЯВыполняю(Парам01)"",""ДляКаждойСтрокиТаблицыЯВыполняю"",""И для каждой строки таблицы """"ИмяТаблицы"""" я выполняю"",""Цикл. Выполняет шаги для каждой строки таблицы"",""UI.Таблицы.Перебор строк"",""Цикл"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ПокаВТаблицеКоличествоСтрокТогда(Парам01,Парам02,Парам03)"",""ПокаВТаблицеКоличествоСтрокТогда"",""И Пока в таблице """"ИмяТаблицы"""" количество строк """">"""" 0 Тогда"",""Цикл. Выполняет шаги до тех пор, пока в таблице есть строки"",""UI.Таблицы.Перебор строк"",""Цикл"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""СлужебноеУсловиеВКоторомМеняетсяСлужебнаяПеременнаяИстинноТогда()"",""СлужебноеУсловиеВКоторомМеняетсяСлужебнаяПеременнаяИстинноТогда"",""Если служебное условие, в котором меняется служебная переменная истинно тогда"","""","""",""Условие"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВТечениеСекундЯВыполняю(Парам01)"",""ВТечениеСекундЯВыполняю"",""И в течение 100 секунд я выполняю"",""Цикл. Выполняет действия в цикле в течение заданного числа секунд. По истечении времени вызывает исключение."",""Прочее.Циклы"",""Цикл"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯПрерываюЦикл()"",""ЯПрерываюЦикл"",""Тогда я прерываю цикл"",""Устанавливает признак, что надо завершить выполнение цикла"",""Прочее.Циклы"");

	
	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//И Пока выражение встроенного ""Контекст.СлужебнаяПеременная < 2"" языка истинно тогда
//@ПокаВыражениеВстроенногоЯзыкаИстинноТогда(Парам01)
Процедура ПокаВыражениеВстроенногоЯзыкаИстинноТогда(Выражение) Экспорт
	Результат = Ванесса.ВычислитьВнутреннееВыражение(Выражение);
	Если Результат Тогда
		Ванесса.УстановитьРезультатУсловия(Истина);
	Иначе	
		Ванесса.УстановитьРезультатУсловия(Ложь);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//И для каждой строки таблицы ""ТабличнаяЧасть1"" я выполняю
//@ДляКаждойСтрокиТаблицыЯВыполняю(Парам01)
Процедура ДляКаждойСтрокиТаблицыЯВыполняю(ИмяТЧ) Экспорт
	
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	ИдШага = ""ИдШага"" + XMLСтрока(Ванесса.ПолучитьСостояниеVanessaBehavior().ТекущийШаг.ИдСтроки);
	Если НЕ Контекст.Свойство(ИдШага) Тогда
		//значит это блок инициализации
		Контекст.Вставить(ИдШага,Истина);
		
		ТЧ.ПерейтиКПервойСтроке();
		Ванесса.УстановитьРезультатУсловия(Истина);
		
		Возврат;
	КонецЕсли;	 
	
	
	Попытка
		ТЧ.ПерейтиКСледующейСтроке();
		Ванесса.УстановитьРезультатУсловия(Истина);
	Исключение
		Ванесса.УстановитьРезультатУсловия(Ложь);
		Контекст.Удалить(ИдШага);
	КонецПопытки;
	
	
КонецПроцедуры

&НаКлиенте
//Пока в таблице ""ТабличнаяЧасть1"" количество строк "">"" 0 Тогда
//@ПокаВТаблицеКоличествоСтрокТогда(Парам01,Парам02,Парам03)
Процедура ПокаВТаблицеКоличествоСтрокТогда(ИмяТаблицы,Знач Сравнение,КоличествоСтрок) Экспорт
	ТЧ      = Ванесса.НайтиТЧПоИмени(ИмяТаблицы);
	Таблица = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ);
	Если Таблица = Неопределено Тогда
		ВызватьИсключение ""Не смог получить строки ТЧ <"" + ИмяТаблицы + "">"";
	КонецЕсли;	 
	
	
	Контекст.Вставить(""_ВременнаяТаблицаВычислитьВыражение"",Таблица);
	Сравнение = Ванесса.ПолучитьОператорПоТексту(Сравнение);
	Выражение = ""Контекст._ВременнаяТаблицаВычислитьВыражение.Количество() "" + Сравнение +  "" "" + XMLСтрока(КоличествоСтрок);
	Результат = Ванесса.ВычислитьВнутреннееВыражение(Выражение);
	Если Результат Тогда
		Ванесса.УстановитьРезультатУсловия(Истина);
	Иначе	
		Ванесса.УстановитьРезультатУсловия(Ложь);
	КонецЕсли;
	
	Контекст.Удалить(""_ВременнаяТаблицаВычислитьВыражение"");
КонецПроцедуры

&НаКлиенте
//Если служебное условие, в котором меняется служебная переменная истинно тогда
//@СлужебноеУсловиеВКоторомМеняетсяСлужебнаяПеременнаяИстинноТогда()
Процедура СлужебноеУсловиеВКоторомМеняетсяСлужебнаяПеременнаяИстинноТогда() Экспорт
	Контекст.СлужебнаяПеременная1 = Контекст.СлужебнаяПеременная1 + 1;
	Если Контекст.СлужебнаяПеременная1 < 4 Тогда
		Ванесса.УстановитьРезультатУсловия(Истина);
		Возврат;
	КонецЕсли;	 
	
	Ванесса.УстановитьРезультатУсловия(Ложь);
КонецПроцедуры


&НаКлиенте
Процедура ОбработчикОжиданияВТечениеСекундЯВыполняю()
	ИмяОбработчика = ""ОбработчикОжиданияВТечениеСекундЯВыполняю"";
	
	Если ТекущаяДата() >= ДатаОкончанияОбработкиОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Ванесса.УстановитьРезультатУсловия(Ложь);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,""Не удалось дождаться события завершения цикла в течение <"" + КоличествоСекундОбработкаОжидания + ""> секунд."");
		Возврат;
	КонецЕсли;	
	
	Ванесса.УстановитьРезультатУсловия(Истина);
	Ванесса.ПродолжитьВыполнениеШагов();
КонецПроцедуры

&НаКлиенте
//И в течение 10 секунд я выполняю
//@ВТечениеСекундЯВыполняю(Парам01)
Процедура ВТечениеСекундЯВыполняю(КоличествоСекунд) Экспорт
	Если Контекст.Свойство(""ЗавершитьВыполнениеЦикла"") Тогда
		Если Контекст.ЗавершитьВыполнениеЦикла = Истина Тогда
			Контекст.ЗавершитьВыполнениеЦикла = Ложь;
			Ванесса.УстановитьРезультатУсловия(Ложь);
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Ванесса.ЗапретитьВыполнениеШагов();
	
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ДатаОкончанияОбработкиОжидания    = ДатаНачалаОбработкиОжидания + КоличествоСекундОбработкаОжидания;
	
	ПодключитьОбработчикОжидания(""ОбработчикОжиданияВТечениеСекундЯВыполняю"",1,Истина);
КонецПроцедуры


&НаКлиенте
//Тогда я прерываю цикл
//@ЯПрерываюЦикл()
Процедура ЯПрерываюЦикл() Экспорт
	Контекст.Вставить(""ЗавершитьВыполнениеЦикла"",Истина);
КонецПроцедуры
",
{4,4,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",503de865-4645-4496-b5dd-2e4a76236095}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},
{9,
{2},0,"ДатаНачалаОбработкиОжидания",
{1,1,
{"ru","Дата начала обработки ожидания"}
},
{"Pattern",
{"D"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{3},0,"КоличествоСекундОбработкаОжидания",
{1,1,
{"ru","Количество секунд обработка ожидания"}
},
{"Pattern",
{"N",10,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{4},0,"ДатаОкончанияОбработкиОжидания",
{1,1,
{"ru","Дата окончания обработки ожидания"}
},
{"Pattern",
{"D"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0},0,0}