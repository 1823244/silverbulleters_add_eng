{3,
{46,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0,1,0},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3},0,"","",0,1,"",0,0,0,0,0,0,3,3,0,0,0,100,1,1,0},"
///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//пример вызова Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ДляКаждойСтрокиТаблицыОтбораЯУстанавливаюОтборВСписке(ТабПарам)"",""ДляКаждойСтрокиТаблицыОтбораЯУстанавливаюОтборВСписке"",""И для каждой строки таблицы отбора я устанавливаю отбор в списке"","""","""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ДляКаждойСтрокиТаблицыОтбораЯУстанавливаюОтборВСпискеЕслиЭтоВозможно(ТабПарам)"",""ДляКаждойСтрокиТаблицыОтбораЯУстанавливаюОтборВСпискеЕслиЭтоВозможно"",""И для каждой строки таблицы отбора я устанавливаю отбор в списке если это возможно"","""","""");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//И для каждой строки таблицы отбора я устанавливаю отбор в списке
//@ДляКаждойСтрокиТаблицыОтбораЯУстанавливаюОтборВСписке(ТабПарам)
Процедура ДляКаждойСтрокиТаблицыОтбораЯУстанавливаюОтборВСписке(ТабПарам,ВызыватьИсключениеЕслиНетТакогоФильтра = Истина) Экспорт
	
	Для Каждого СтрокаФильтра Из ТабПарам Цикл
		
		АктивноеОкно           = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
		ТаблицаНастройкаСписка = АктивноеОкно.НайтиОбъект(Тип(""ТестируемаяТаблицаФормы""),,""КомпоновщикНастроекПользовательскиеНастройкиЭлемент*ДоступныеПоляТаблица"");
		
		ОписаниеСтроки = Новый Соответствие;
		ОписаниеСтроки.Вставить(""Доступные поля"",СтрокаФильтра.Кол1);
		ТаблицаНастройкаСписка.ПерейтиКПервойСтроке();
		Попытка
			ТаблицаНастройкаСписка.ПерейтиКСтроке(ОписаниеСтроки,Вычислить(""НаправлениеПереходаКСтроке.Вниз""),Ложь);
		Исключение
			Если ВызыватьИсключениеЕслиНетТакогоФильтра Тогда
				ВызватьИсключение ОписаниеОшибки();
			Иначе
				Продолжить;
			КонецЕсли;	 
		КонецПопытки;
		
		
		ТекущийТекстЯчейки = ТаблицаНастройкаСписка.ПолучитьТекстЯчейки();
		Если ТекущийТекстЯчейки <> СтрокаФильтра.Кол1 Тогда
			//Значит не получилось перейти к нужной строке.
			//Но почему-то в этом окне не вызвалось исключение
			Если ВызыватьИсключениеЕслиНетТакогоФильтра Тогда
				ВызватьИсключение ""Не смог перейти к строке фильтра <"" + СтрокаФильтра.Кол1 + "">"";
			Иначе
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		ТЧ = АктивноеОкно.НайтиОбъект(Тип(""ТестируемаяТаблицаФормы""),,""КомпоновщикНастроекПользовательскиеНастройкиЭлемент*Отбор"");
		Кнопка = АктивноеОкно.НайтиОбъект(Тип(""ТестируемаяКнопкаФормы""),,""КомпоновщикНастроекПользовательскиеНастройкиЭлемент*ДоступныеПоляВыбрать"");
		Кнопка.Нажать();
		
		ЗакладкаОтбор = АктивноеОкно.НайтиОбъект(Тип(""ТестируемаяГруппаФормы""),""Отбор"");
		ЗакладкаОтбор.Активизировать();
		
		ТЧ.Активизировать();
		ПолеВидСравнения  = ТЧ.НайтиОбъект(Тип(""ТестируемоеПолеФормы""),,""КомпоновщикНастроекПользовательскиеНастройкиЭлемент*ОтборВидСравнения"");
		ПолеВидСравнения.Активизировать();
		
		//в Web не сработало ТЧ.ПолучитьТекстЯчейки(""КомпоновщикНастроекПользовательскиеНастройкиЭлемент*ОтборВидСравнения"");
		ВидСравненияТекст = ТЧ.ПолучитьТекстЯчейки();
		
		ПолеЗначение = ТЧ.НайтиОбъект(Тип(""ТестируемоеПолеФормы""),""Значение"");
		
		ПолеЗначение.Активизировать();
		ТЧ.ИзменитьСтроку();
		ПолеЗначение.ВвестиТекст(СтрокаФильтра.Кол3);
		
		Если НРег(СокрЛП(ВидСравненияТекст)) <> НРег(СокрЛП(СтрокаФильтра.Кол2)) Тогда
			Ванесса.Шаг(""И в ТЧ """"КомпоновщикНастроекПользовательскиеНастройкиЭлемент*Отбор"""" я активизирую поле """"Вид сравнения"""""");
			Ванесса.Шаг(""И в ТЧ """"КомпоновщикНастроекПользовательскиеНастройкиЭлемент*Отбор"""" в поле """"Вид сравнения"""" я ввожу текст '"" + СтрокаФильтра.Кол2 + ""'"");
		КонецЕсли;	 
		
		ТЧ.ЗакончитьРедактированиеСтроки();

	КонецЦикла;	
КонецПроцедуры


&НаКлиенте
//И для каждой строки таблицы отбора я устанавливаю отбор в списке если это возможно
//@ДляКаждойСтрокиТаблицыОтбораЯУстанавливаюОтборВСпискеЕслиЭтоВозможно(ТабПарам)
Процедура ДляКаждойСтрокиТаблицыОтбораЯУстанавливаюОтборВСпискеЕслиЭтоВозможно(ТабПарам) Экспорт
	ДляКаждойСтрокиТаблицыОтбораЯУстанавливаюОтборВСписке(ТабПарам,Ложь);	
КонецПроцедуры
",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",503de865-4645-4496-b5dd-2e4a76236095}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0},0,0}