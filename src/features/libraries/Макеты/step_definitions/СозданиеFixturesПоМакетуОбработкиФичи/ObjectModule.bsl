//начало текста модуля

///////////////////////////////////////////////////
//Служебная часть
///////////////////////////////////////////////////


// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//пример вызова Ванесса.ДобавитьШагВМассивТестов(МассивТестов, Снипет, ИмяПроцедуры,ПредставлениеТеста = Неопределено,ОписаниеШага = Неопределено,ТипШагаДляОписания = Неопределено,ТипШагаВДереве = Неопределено);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯСоздаюFixturesПоМакету(Парам01)","ЯСоздаюFixturesПоМакету","И     Я создаю fixtures по макету ""Макет1""", "Создает данные из макета MXL", "Данные");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВБазеОтсутствуетПользовательИБ(Парам01)","ВБазеОтсутствуетПользовательИБ","Когда В базе отсутствует пользователь ИБ ""ТестовыйПользователь""", "Проверяет отсутствие пользователя ИБ", "Пользователи");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВБазеСуществуетПользовательИБ(Парам01)","ВБазеСуществуетПользовательИБ","Тогда В базе существует пользователь ИБ ""ТестовыйПользователь""", "Проверяет существование пользователя ИБ", "Пользователи");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯУдаляюПользователяИБ(Парам01)","ЯУдаляюПользователяИБ","И Я удаляю пользователя ИБ ""ТестовыйПользователь""", "Удаляет пользователя ИБ", "Пользователи");

	Возврат ВсеТесты;
КонецФункции
	

// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	Возврат ПолучитьМакет(ИмяМакета);
КонецФункции
	

// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////


// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры


// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

Функция ПользовательСуществует(ИмяПользователя)
	Возврат ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя) <> Неопределено;	
КонецФункции

//И     Я создаю fixtures по макету "Макет1"
//@ЯСоздаюFixturesПоМакету(Парам01)
Процедура ЯСоздаюFixturesПоМакету(ИмяМакета) Экспорт
	
	Макет           = Ванесса.ПолучитьФорму("Форма").ОбработкаСвязаннаяСИсполняемойФичей.ПолучитьМакетОбработки(ИмяМакета);
	Ванесса.ПроверитьНеРавенство(Макет, Неопределено, "Не удалось получить макет.");
	
	СтруктураДанных = Ванесса.СоздатьДанныеПоТабличномуДокументу(Макет);
	Ванесса.ПроверитьНеРавенство(СтруктураДанных, Неопределено,"Не получили структуру данных.");
КонецПроцедуры

//Когда В базе отсутствует пользователь ИБ "ТестовыйПользователь"
//@ВБазеОтсутствуетПользовательИБ(Парам01)
Процедура ВБазеОтсутствуетПользовательИБ(ИмяПользователя) Экспорт
	ДопСообщениеОшибки = "Ожидали, что пользователь " + ИмяПользователя + " отсутствует в базе";
	Ванесса.ПроверитьЛожь(ПользовательСуществует(ИмяПользователя), ДопСообщениеОшибки);
КонецПроцедуры

//Тогда В базе существует пользователь ИБ "ТестовыйПользователь"
//@ВБазеСуществуетПользовательИБ(Парам01)
Процедура ВБазеСуществуетПользовательИБ(ИмяПользователя) Экспорт
	ДопСообщениеОшибки = "Ожидали, что пользователь " + ИмяПользователя + " существует в базе";
	Ванесса.ПроверитьИстину(ПользовательСуществует(ИмяПользователя), ДопСообщениеОшибки);
КонецПроцедуры

//И Я удаляю пользователя ИБ "ТестовыйПользователь"
//@ЯУдаляюПользователяИБ(Парам01)
Процедура ЯУдаляюПользователяИБ(ИмяПользователя) Экспорт
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	ПользовательИБ.Удалить();
КонецПроцедуры

//окончание текста модуля  