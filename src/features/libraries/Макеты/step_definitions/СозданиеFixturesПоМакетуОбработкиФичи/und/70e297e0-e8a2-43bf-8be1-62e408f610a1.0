{3,
{46,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0,1,0},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3},0,"","",0,1,"",0,0,0,0,0,0,3,3,0,0,0,100,1,1,0},"//начало текста модуля

///////////////////////////////////////////////////
//Служебная часть
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//пример вызова Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯЗагружаюМакетИСохраняюДанныеИзМакетаВПеременную(Парам01,Парам02)"",""ЯЗагружаюМакетИСохраняюДанныеИзМакетаВПеременную"",""И     Я загружаю макет """"Макет"""" и сохраняю данные из макета в переменную """"ДанныеИзМакета"""""",""Создает данные из макета MXL, полученного через плагин ГенераторДанных, и помещает загруженные данные в переменную контекста"", ""Данные"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯЗагружаюМакет(Парам01)"",""ЯЗагружаюМакет"",""И я загружаю макет """"ТысячаЭлементовСправочника1"""""",""Загружает данные из макета MXL, полученного через плагин ГенераторДанных"", ""Данные"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""СуществуетМакет(Парам01)"",""СуществуетМакет"",""и существует макет """"ТысячаЭлементовСправочника1"""""",""Проверяет наличие макета"", ""Макет"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯСоздаюFixturesПоМакету(Парам01)"",""ЯСоздаюFixturesПоМакету"",""Загружает данные из макета MXL, полученного через плагин ГенераторДанных"", ""Данные"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯЗагружаюМакетСПеременными(Парам01,ТабПарам)"",""ЯЗагружаюМакетСПеременными"",""И я загружаю макет """"Макет1"""" с переменными:"","""","""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВБазеОтсутствуетПользовательИБ(Парам01)"",""ВБазеОтсутствуетПользовательИБ"",""Когда В базе отсутствует пользователь ИБ """"ТестовыйПользователь"""""","""","""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВБазеСуществуетПользовательИБ(Парам01)"",""ВБазеСуществуетПользовательИБ"",""Тогда В базе существует пользователь ИБ """"ТестовыйПользователь"""""","""","""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯУдаляюПользователяИБ(Парам01)"",""ЯУдаляюПользователяИБ"",""И Я удаляю пользователя ИБ """"ТестовыйПользователь"""""","""","""");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//И     Я создаю fixtures по макету ""Макет1""
//@ЯСоздаюFixturesПоМакету(Парам01)
Процедура ЯСоздаюFixturesПоМакету(Знач ИмяМакета) Экспорт
	ЗагрузитьМакет(ИмяМакета);
КонецПроцедуры

&НаКлиенте
//Когда В базе отсутствует пользователь ИБ ""ТестовыйПользователь""
//@ВБазеОтсутствуетПользовательИБ(Парам01)
Процедура ВБазеОтсутствуетПользовательИБ(ИмяПользователя) Экспорт
	ДопСообщениеОшибки = ""Ожидали, что пользователь "" + ИмяПользователя + "" отсутствует в базе"";
	Ванесса.ПроверитьИстину(ВБазеОтсутствуетПользовательИБСервер(ИмяПользователя), ДопСообщениеОшибки);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВБазеОтсутствуетПользовательИБСервер(ИмяПользователя)
	Возврат ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя) = Неопределено;	
КонецФункции

&НаКлиенте
//Тогда В базе существует пользователь ИБ ""ТестовыйПользователь""
//@ВБазеСуществуетПользовательИБ(Парам01)
Процедура ВБазеСуществуетПользовательИБ(ИмяПользователя) Экспорт
	ДопСообщениеОшибки = ""Ожидали, что пользователь "" + ИмяПользователя + "" существует в базе"";
	Ванесса.ПроверитьЛожь(ВБазеОтсутствуетПользовательИБСервер(ИмяПользователя), ДопСообщениеОшибки);
КонецПроцедуры

&НаКлиенте
//И Я удаляю пользователя ИБ ""ТестовыйПользователь""
//@ЯУдаляюПользователяИБ(Парам01)
Процедура ЯУдаляюПользователяИБ(ИмяПользователя) Экспорт
	ЯУдаляюПользователяИБСервер(ИмяПользователя);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЯУдаляюПользователяИБСервер(ИмяПользователя)
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	ПользовательИБ.Удалить();
КонецПроцедуры

&НаКлиенте
//и существует макет ""ТысячаЭлементовСправочника1""
//@СуществуетМакет(Парам01)
Процедура СуществуетМакет(ИмяМакета) Экспорт
	Попытка
		Макет = Ванесса.ПолучитьМакетОбработки(ИмяМакета);
	Исключение
		ВызватьИсключение ""Не найден макет ""+ИмяМакета+"" ошибка: ""+ОписаниеОшибки();
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
//И я загружаю макет ""ТысячаЭлементовСправочника1""
//@ЯЗагружаюМакет(Парам01)
Процедура ЯЗагружаюМакет(Знач ИмяМакета) Экспорт
	ЗагрузитьМакет(ИмяМакета);
КонецПроцедуры

&НаКлиенте
//И     Я загружаю макет ""Макет"" и сохраняю данные из макета в переменную ""ДанныеИзМакета""
//@ЯЗагружаюМакетИСохраняюДанныеИзМакетаВПеременную(Парам01,Парам02)
Процедура ЯЗагружаюМакетИСохраняюДанныеИзМакетаВПеременную(Знач ИмяМакета, Знач ИмяПеременнойКонтекста) Экспорт
	
	СтруктураДанных = ЗагрузитьМакет(ИмяМакета);
	//Ванесса.СохранитьЗначениеВКонтекст(ИмяПеременнойКонтекста, СтруктураДанных);
	Контекст.Вставить(ИмяПеременнойКонтекста, СтруктураДанных);
	
КонецПроцедуры

&НаКлиенте
//И я загружаю макет ""Макет1"" с переменными:
//@ЯЗагружаюМакетСПеременными(Парам01,ТабПарам)
Процедура ЯЗагружаюМакетСПеременными(Знач ИмяМакета, Знач ТаблицаИзФичи) Экспорт
	СтруктураДанных = ЗагрузитьМакет(ИмяМакета);
	Контекст.Вставить(""ДанныеИзМакета"", СтруктураДанных);
	
	ЕстьКолонкаПереименования = ТаблицаИзФичи.Количество() > 0 И ТаблицаИзФичи[0].Количество() > 1;
	Для каждого Строка Из ТаблицаИзФичи Цикл
		ИмяПеременнойМакета = Строка[""Кол1""];
		ИмяПеременнойКонтекста = ИмяПеременнойМакета;
		Если ЕстьКолонкаПереименования Тогда
			ИмяПеременнойКонтекста = Строка[""Кол2""];
		КонецЕсли;
		
		Контекст.Вставить(ИмяПеременнойКонтекста, СтруктураДанных[ИмяПеременнойМакета]);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьМакет(Знач ИмяМакета)
	
	Попытка
		Макет 								= Ванесса.ПолучитьМакетОбработки(ИмяМакета);
		СтруктураДанных 					= Ванесса.СоздатьДанныеПоТабличномуДокументу(Макет);
		Ванесса.ПроверитьНеРавенство(СтруктураДанных, Неопределено, ""Не удалось загрузить данные из макета MXL, полученного через плагин ГенераторДанных."");
		
		Возврат СтруктураДанных;
	Исключение
		Ошибка =  СокрЛП(ОписаниеОшибки());  		
		ВызватьИсключение ""Шаг выполнен с ошибкой: 
		|"" + СокрЛП(Ошибка);	
	КонецПопытки;  
	
	Возврат Неопределено;
КонецФункции

//окончание текста модуля
",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",1fa267af-3d54-4f70-ac00-718486d7aafd}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0},0,0}