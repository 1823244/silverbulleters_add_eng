
#Область Служебные_функции_и_процедуры

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//пример вызова Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯУдаляюВсеЗаписиРегистрСведенийПодчиненРегистратору(Парам01)","ЯУдаляюВсеЗаписиРегистрСведенийПодчиненРегистратору","И я удаляю все записи РегистрСведенийПодчиненРегистратору ""РСПодчиненРегистраторуПериодический""","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВБазеЕстьЗаписиРегистрСведений(Парам01)","ВБазеЕстьЗаписиРегистрСведений","И В базе есть записи РегистрСведений ""РСПодчиненРегистраторуПериодический""","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВМетаданныхЕстьРегистрНакопления(Парам01)","ВМетаданныхЕстьРегистрНакопления","Когда в метаданных есть РегистрНакопления ""РегистрНакопленияОбороты""","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯУдаляюВсеЗаписиРегистрНакопления(Парам01)","ЯУдаляюВсеЗаписиРегистрНакопления","И я удаляю все записи РегистрНакопления ""РегистрНакопленияОбороты""","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВБазеНетЗаписейРегистрНакопления(Парам01)","ВБазеНетЗаписейРегистрНакопления","И в базе нет записей РегистрНакопления ""РегистрНакопленияОбороты""","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВБазеПоявиласьХотяБыОднаЗаписьРегистрНакопления(Парам01)","ВБазеПоявиласьХотяБыОднаЗаписьРегистрНакопления","Тогда В базе появилась хотя бы одна запись РегистрНакопления ""РегистрНакопленияОбороты""","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВБазеЕстьЗаписиРегистрНакопления(Парам01)","ВБазеЕстьЗаписиРегистрНакопления","И В базе есть записи РегистрНакопления ""РегистрНакопленияОстатки""","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВМетаданныхЕстьРегистрБухгалтерии(Парам01)","ВМетаданныхЕстьРегистрБухгалтерии","Когда в метаданных есть РегистрБухгалтерии ""РегистрБухгалтерии1""","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯУдаляюВсеЗаписиРегистрБухгалтерии(Парам01)","ЯУдаляюВсеЗаписиРегистрБухгалтерии","И я удаляю все записи РегистрБухгалтерии ""РегистрБухгалтерии1""","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВБазеНетЗаписейРегистрБухгалтерии(Парам01)","ВБазеНетЗаписейРегистрБухгалтерии","И в базе нет записей РегистрБухгалтерии ""РегистрБухгалтерии1""","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВБазеПоявиласьХотяБыОднаЗаписьРегистрБухгалтерии(Парам01)","ВБазеПоявиласьХотяБыОднаЗаписьРегистрБухгалтерии","Тогда В базе появилась хотя бы одна запись РегистрБухгалтерии ""РегистрБухгалтерии1""","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВБазеЕстьЗаписиРегистрБухгалтерии(Парам01)","ВБазеЕстьЗаписиРегистрБухгалтерии","И В базе есть записи РегистрБухгалтерии ""РегистрБухгалтерии1""","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВМетаданныхЕстьРегистрРасчета(Парам01)","ВМетаданныхЕстьРегистрРасчета","Когда в метаданных есть РегистрРасчета ""РегистрРасчета1""","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯУдаляюВсеЗаписиРегистрРасчета(Парам01)","ЯУдаляюВсеЗаписиРегистрРасчета","И я удаляю все записи РегистрРасчета ""РегистрРасчета1""","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВБазеНетЗаписейРегистрРасчета(Парам01)","ВБазеНетЗаписейРегистрРасчета","И в базе нет записей РегистрРасчета ""РегистрРасчета1""","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВБазеПоявиласьХотяБыОднаЗаписьРегистрРасчета(Парам01)","ВБазеПоявиласьХотяБыОднаЗаписьРегистрРасчета","Тогда В базе появилась хотя бы одна запись РегистрРасчета ""РегистрРасчета1""","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВБазеЕстьЗаписиРегистрРасчета(Парам01)","ВБазеЕстьЗаписиРегистрРасчета","И В базе есть записи РегистрРасчета ""РегистрРасчета1""","","");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции

#КонецОбласти



#Область Работа_со_сценариями

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры

#КонецОбласти


///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

#Область ОбработкаРегистровСведений
	
&НаСервереБезКонтекста
Процедура ЯУдаляюВсеЗаписиРегистрСведенийСервер(ВидРС)
	
	ЯУдаляюВсеЗаписиРегистраСервер(РегистрыСведений, "РегистрСведений", ВидРС);
	
КонецПроцедуры	

&НаКлиенте
//И я удаляю все записи РегистрСведенийПодчиненРегистратору "РСПодчиненРегистраторуПериодический"
//@ЯУдаляюВсеЗаписиРегистрСведенийПодчиненРегистратору(Парам01)
Процедура ЯУдаляюВсеЗаписиРегистрСведенийПодчиненРегистратору(ВидРС) Экспорт
	
	ЯУдаляюВсеЗаписиРегистрСведенийСервер(ВидРС);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработкаРегистровНакопления

&НаКлиенте
//Когда в метаданных есть РегистрНакопления "РегистрНакопления1"
//@ВМетаданныхЕстьРегистрНакопления(Парам01)
Процедура ВМетаданныхЕстьРегистрНакопления(ВидРН) Экспорт
	
	Нашел = ВМетаданныхЕстьРегистрСервер("РегистрыНакопления", ВидРН);
	Ванесса.ПроверитьРавенство(Нашел, Истина, "В метаданных не найден вид РН " + ВидРН);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЯУдаляюВсеЗаписиРегистрНакопленияСервер(ВидРН)
	
	ЯУдаляюВсеЗаписиРегистраСервер(РегистрыНакопления, "РегистрНакопления", ВидРН);
			
КонецПроцедуры	

&НаКлиенте
//И я удаляю все записи РегистрНакопления "РегистрНакопления1"
//@ЯУдаляюВсеЗаписиРегистрНакопления(Парам01)
Процедура ЯУдаляюВсеЗаписиРегистрНакопления(ВидРН) Экспорт
	
	ЯУдаляюВсеЗаписиРегистрНакопленияСервер(ВидРН);
	
КонецПроцедуры

&НаКлиенте
//И в базе нет записей РегистрНакопления "РегистрНакопления1"
//@ВБазеНетЗаписейРегистрНакопления(Парам01)
Процедура ВБазеНетЗаписейРегистрНакопления(ВидРН) Экспорт
	НетЗаписей = ВБазеНетЗаписейРегистраСервер("РегистрНакопления", ВидРН);
	Ванесса.ПроверитьРавенство(НетЗаписей, Истина, "Не должно быть записей РН " + ВидРН + ", а они есть");
КонецПроцедуры

&НаКлиенте
//Тогда В базе появилась хотя бы одна запись РегистрНакопления "РегистрНакопления1"
//@ВБазеПоявиласьХотяБыОднаЗаписьРегистрНакопления(Парам01)
Процедура ВБазеПоявиласьХотяБыОднаЗаписьРегистрНакопления(ВидР) Экспорт
	ВБазеЕстьЗаписиРегистрНакопления(ВидР);
КонецПроцедуры

#КонецОбласти 

#Область ОбработкаРегистровБухгалтерии

&НаКлиенте
//Когда в метаданных есть РегистрБухгалтерии "РегистрБухгалтерии1"
//@ВМетаданныхЕстьРегистрБухгалтерии(Парам01)
Процедура ВМетаданныхЕстьРегистрБухгалтерии(ВидРБ) Экспорт
	
	Нашел = ВМетаданныхЕстьРегистрСервер("РегистрыБухгалтерии", ВидРБ);
	
	Ванесса.ПроверитьРавенство(Нашел,Истина,"В метаданных не найден вид РБ " + ВидРБ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЯУдаляюВсеЗаписиРегистрБухгалтерииСервер(ВидРБ)
	
	ЯУдаляюВсеЗаписиРегистраСервер(РегистрыБухгалтерии, "РегистрБухгалтерии", ВидРБ);
			
КонецПроцедуры	

&НаКлиенте
//И я удаляю все записи РегистрБухгалтерии "РегистрБухгалтерии1"
//@ЯУдаляюВсеЗаписиРегистрБухгалтерии(Парам01)
Процедура ЯУдаляюВсеЗаписиРегистрБухгалтерии(ВидРБ) Экспорт
	
	ЯУдаляюВсеЗаписиРегистрБухгалтерииСервер(ВидРБ);
	
КонецПроцедуры

&НаКлиенте
//И в базе нет записей РегистрБухгалтерии "РегистрБухгалтерии1"
//@ВБазеНетЗаписейРегистрБухгалтерии(Парам01)
Процедура ВБазеНетЗаписейРегистрБухгалтерии(ВидРБ) Экспорт
	НетЗаписей = ВБазеНетЗаписейРегистраСервер("РегистрБухгалтерии", ВидРБ);
	Ванесса.ПроверитьРавенство(НетЗаписей, Истина, "Не должно быть записей РБ " + ВидРБ + ", а они есть");
КонецПроцедуры

&НаКлиенте
//Тогда В базе появилась хотя бы одна запись РегистрБухгалтерии "РегистрБухгалтерии1"
//@ВБазеПоявиласьХотяБыОднаЗаписьРегистрБухгалтерии(Парам01)
Процедура ВБазеПоявиласьХотяБыОднаЗаписьРегистрБухгалтерии(ВидР) Экспорт
	ВБазеЕстьЗаписиРегистрБухгалтерии(ВидР);
КонецПроцедуры

#КонецОбласти 

#Область ОбработкаРегистровРасчета

&НаКлиенте
//Когда в метаданных есть РегистрРасчета "РегистрРасчета1"
//@ВМетаданныхЕстьРегистрРасчета(Парам01)
Процедура ВМетаданныхЕстьРегистрРасчета(ВидРР) Экспорт
	
	Нашел = ВМетаданныхЕстьРегистрСервер("РегистрыРасчета", ВидРР);
	
	Ванесса.ПроверитьРавенство(Нашел,Истина,"В метаданных не найден вид РР " + ВидРР);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЯУдаляюВсеЗаписиРегистрРасчетаСервер(ВидРР)
	
	ЯУдаляюВсеЗаписиРегистраСервер(РегистрыРасчета, "РегистрРасчета", ВидРР);
			
КонецПроцедуры	

&НаКлиенте
//И я удаляю все записи РегистрРасчета "РегистрРасчета1"
//@ЯУдаляюВсеЗаписиРегистрРасчета(Парам01)
Процедура ЯУдаляюВсеЗаписиРегистрРасчета(ВидРР) Экспорт
	
	ЯУдаляюВсеЗаписиРегистрРасчетаСервер(ВидРР);
	
КонецПроцедуры

&НаКлиенте
//И в базе нет записей РегистрБухгалтерии "РегистрРасчета1"
//@ВБазеНетЗаписейРегистрРасчета(Парам01)
Процедура ВБазеНетЗаписейРегистрРасчета(ВидРР) Экспорт
	НетЗаписей = ВБазеНетЗаписейРегистраСервер("РегистрРасчета", ВидРР);
	Ванесса.ПроверитьРавенство(НетЗаписей, Истина, "Не должно быть записей РР " + ВидРР + ", а они есть");
КонецПроцедуры

&НаКлиенте
//Тогда В базе появилась хотя бы одна запись РегистрРасчета "РегистрРасчета1"
//@ВБазеПоявиласьХотяБыОднаЗаписьРегистрРасчета(Парам01)
Процедура ВБазеПоявиласьХотяБыОднаЗаписьРегистрРасчета(ВидР) Экспорт
	ВБазеЕстьЗаписиРегистрРасчета(ВидР);
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
//И В базе есть записи РегистрСведений "РСПодчиненРегистраторуПериодический"
//@ВБазеЕстьЗаписиРегистрСведений(Парам01)
Процедура ВБазеЕстьЗаписиРегистрСведений(ВидР) Экспорт
	НетЗаписей = ВБазеНетЗаписейРегистраСервер("РегистрСведений", ВидР);
	Ванесса.ПроверитьРавенство(НетЗаписей, Ложь, "Должны быть записи РС " + ВидР + ", а их нет");
КонецПроцедуры

&НаКлиенте
//И В базе есть записи РегистрНакопления "РегистрНакопленияОстатки"
//@ВБазеЕстьЗаписиРегистрНакопления(Парам01)
Процедура ВБазеЕстьЗаписиРегистрНакопления(ВидР) Экспорт
	НетЗаписей = ВБазеНетЗаписейРегистраСервер("РегистрНакопления", ВидР);
	Ванесса.ПроверитьРавенство(НетЗаписей, Ложь, "Должны быть записи РН " + ВидР + ", а их нет");
КонецПроцедуры

&НаКлиенте
//И В базе есть записи РегистрБухгалтерии "РегистрБухгалтерии1"
//@ВБазеЕстьЗаписиРегистрБухгалтерии(Парам01)
Процедура ВБазеЕстьЗаписиРегистрБухгалтерии(ВидР) Экспорт
	НетЗаписей = ВБазеНетЗаписейРегистраСервер("РегистрБухгалтерии", ВидР);
	Ванесса.ПроверитьРавенство(НетЗаписей, Ложь, "Должны быть записи РБ " + ВидР + ", а их нет");
КонецПроцедуры

&НаКлиенте
//И В базе есть записи РегистрРасчета "РегистрРасчета1"
//@ВБазеЕстьЗаписиРегистрРасчета(Парам01)
Процедура ВБазеЕстьЗаписиРегистрРасчета(ВидР) Экспорт
	НетЗаписей = ВБазеНетЗаписейРегистраСервер("РегистрРасчета", ВидР);
	Ванесса.ПроверитьРавенство(НетЗаписей, Ложь, "Должны быть записи РР " + ВидР + ", а их нет");
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЯУдаляюВсеЗаписиРегистраСервер(МенеджерРегистра, ИмяМенеджераРегистра, ВидР)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Регистр1.Регистратор
		|ИЗ
		|	РегистрСведений.РСПодчиненРегистраторуПериодический КАК Регистр1";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.", ИмяМенеджераРегистра + ".");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ".РСПодчиненРегистраторуПериодический", "." + ВидР);
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = МенеджерРегистра[ВидР].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Регистратор);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВБазеНетЗаписейРегистраСервер(ИмяМенеджераРегистра, ВидР)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Регистр1.Регистратор
		|ИЗ
		|	РегистрНакопления.РегистрНакопленияОбороты КАК Регистр1";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрНакопления.", ИмяМенеджераРегистра + ".");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ".РегистрНакопленияОбороты", "." + ВидР);
	Результат = Запрос.Выполнить();

	Возврат Результат.Пустой();

КонецФункции	

&НаСервереБезКонтекста
Функция ВМетаданныхЕстьРегистрСервер(ИмяМенеджераРегистра, ВидРегистра)
	Нашел = Ложь;
	Для каждого Элем Из Метаданные[ИмяМенеджераРегистра] Цикл
		Имя = Элем.Имя;
		Если НРег(Имя) = НРег(ВидРегистра) Тогда
			Нашел = Истина;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Нашел; 
КонецФункции	
