{3,
{46,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0,1,0},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3},0,"","",0,1,"",0,0,0,0,0,0,3,3,0,0,0,100,1,1,0},"//начало текста модуля
&НаКлиенте
Перем Ванесса;
 
&НаКлиенте
Перем Контекст Экспорт;
 
&НаКлиенте
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//пример вызова Ванесса.ДобавитьШагВМассивТестов(МассивТестов, Снипет, ИмяПроцедуры,ПредставлениеТеста = Неопределено,ОписаниеШага = Неопределено,ТипШагаДляОписания = Неопределено,ТипШагаВДереве = Неопределено);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВМетаданныхЕстьРегистрСведений(Парам01)"",""ВМетаданныхЕстьРегистрСведений"",""Когда в метаданных есть РегистрСведений """"РегистрСведений1"""""", ""Проверяет наличие регистра сведений в метаданных ИБ"", ""Данные"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯУдаляюВсеЗаписиРегистрСведений(Парам01)"",""ЯУдаляюВсеЗаписиРегистрСведений"",""И я удаляю все записи РегистрСведений """"РегистрСведений1"""""", ""Удаляются все записи регистра сведений из ИБ"", ""Данные"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВБазеНетЗаписейРегистрСведений(Парам01)"",""ВБазеНетЗаписейРегистрСведений"",""И в базе нет записей РегистрСведений """"РегистрСведений1"""""", ""Проверяет отсутствие записей в регистре сведений"", ""Данные"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯСоздалFixtureРегистрСведенийПоМакету(Парам01)"",""ЯСоздалFixtureРегистрСведенийПоМакету"",""И я создал  fixture РегистрСведений по макету """"Макет"""""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВБазеПоявиласьХотяБыОднаЗаписьРегистрСведений(Парам01)"",""ВБазеПоявиласьХотяБыОднаЗаписьРегистрСведений"",""Тогда В базе появилась хотя бы одна запись РегистрСведений """"РегистрСведений1"""""", ""Проверяет наличие хотя бы одной записи регистра сведений"", ""Данные"");

	Возврат ВсеТесты;
КонецФункции

&НаКлиенте
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ВМетаданныхЕстьРССервер(ВидРС)
	Нашел = Ложь;
	Для каждого Элем Из Метаданные.РегистрыСведений Цикл
		Имя = Элем.Имя;
		Если НРег(Имя) = НРег(ВидРС) Тогда
			Нашел = Истина;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Нашел; 
КонецФункции	


&НаКлиенте
//Когда в метаданных есть РегистрСведений ""РегистрСведений1""
//@ВМетаданныхЕстьРегистрСведений(Парам01)
Процедура ВМетаданныхЕстьРегистрСведений(ВидРС) Экспорт
	Нашел = ВМетаданныхЕстьРССервер(ВидРС);
	
	Ванесса.ПроверитьРавенство(Нашел,Истина,""В метаданных есть вид РС "" + ВидРС);
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ЯУдаляюВсеЗаписиРС(ВидРС)
	НаборЗаписей = РегистрыСведений[ВидРС].СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
КонецПроцедуры

&НаКлиенте
//И я удаляю все записи РегистрСведений ""РегистрСведений1""
//@ЯУдаляюВсеЗаписиРегистрСведений(Парам01)
Процедура ЯУдаляюВсеЗаписиРегистрСведений(ВидРС) Экспорт
	ЯУдаляюВсеЗаписиРС(ВидРС);
КонецПроцедуры


&НаСервереБезКонтекста
Функция ВБазеНетЗаписейРССервер(ВидРС)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		""ВЫБРАТЬ ПЕРВЫЕ 1
		|	*
		|ИЗ
		|	РегистрСведений.РегистрСведений1 КАК РегистрСведений1"";

	Запрос.Текст = СтрЗаменить(Запрос.Текст,""РегистрСведений1"",ВидРС);	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат 1;
	КонецЦикла;
	
	Возврат 0;

КонецФункции	

&НаКлиенте
//И в базе нет записей РегистрСведений ""РегистрСведений1""
//@ВБазеНетЗаписейРегистрСведений(Парам01)
Процедура ВБазеНетЗаписейРегистрСведений(ВидРС) Экспорт
	КолЭлементов = ВБазеНетЗаписейРССервер(ВидРС);
	Ванесса.ПроверитьРавенство(КолЭлементов,0,""Не должно быть записей"");
КонецПроцедуры




&НаСервере
Функция ПолучитьМакетСервер(Имямакета)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	Возврат ОбъектСервер.ПолучитьМакет(Имямакета);
КонецФункции	


&НаКлиенте
//И я создал  fixture РегистрСведений по макету ""Макет""
//@ЯСоздалFixtureРегистрСведенийПоМакету(Парам01)
Процедура ЯСоздалFixtureРегистрСведенийПоМакету(ИмяМакета) Экспорт
	Макет = ПолучитьМакетСервер(ИмяМакета);
	Плагин = Ванесса.Плагин(""СериализаторMXL"");
	СтруктураДанных = Плагин.СоздатьДанныеПоТабличномуДокументу(Макет);
	//СтруктураДанных = Ванесса.СоздатьДанныеПоТабличномуДокументу(Макет);
	Ванесса.ПроверитьНеРавенство(СтруктураДанных,Неопределено,""Получили структуру данных."");
КонецПроцедуры


&НаСервереБезКонтекста
Функция ВБазеПоявиласьХотяБыОднаЗаписьРССервер(ВидРС)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		""ВЫБРАТЬ ПЕРВЫЕ 1
		|	*
		|ИЗ
		|	РегистрСведений.РегистрСведений1 КАК РегистрСведений1"";

	Запрос.Текст = СтрЗаменить(Запрос.Текст,""РегистрСведений1"",ВидРС);	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат 1;
	КонецЦикла;
	
	Возврат 0;

КонецФункции	

&НаКлиенте
//В базе появилась хотя бы один элемент справочника ""Справочник1""
//@ВБазеПоявиласьХотяБыОдинЭлементСправочника(Парам01Строка)
Процедура ВБазеПоявиласьХотяБыОднаЗаписьРегистрСведений(ВидРС) Экспорт
	КолЭлементов = ВБазеПоявиласьХотяБыОднаЗаписьРССервер(ВидРС);
	Ванесса.ПроверитьНеРавенство(КолЭлементов,0,""В базе должны быть записи"");
КонецПроцедуры


//окончание текста модуля

",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",1fa267af-3d54-4f70-ac00-718486d7aafd}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0},0,0}