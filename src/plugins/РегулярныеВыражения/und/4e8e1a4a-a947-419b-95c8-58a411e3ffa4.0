{3,
{46,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0,1,0},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3},0,"","",0,1,"",2,0,0,0,0,0,3,3,0,0,2,100,1,1,0},"&НаКлиенте
Перем ПутьКФайлуПолный Экспорт;// в эту переменную будет установлен правильный клиентский путь к текущему файлу

&НаКлиенте
Перем ЭтоLinux;

&НаКлиенте
Перем РегулярноеВыражение;

&НаКлиенте
Перем ТестерЛинукс;

&НаКлиенте
Перем Ожидаем;

// { Plugin interface
&НаКлиенте
Функция ОписаниеПлагина(ВозможныеТипыПлагинов) Экспорт
	Возврат ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов);
КонецФункции

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	ЭтоLinux = КонтекстЯдраПараметр.ЭтоLinux;
	Ожидаем = КонтекстЯдраПараметр.Плагин(""УтвержденияBDD"");
КонецПроцедуры

&НаСервере
Функция ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов)
	Возврат ЭтотОбъектНаСервере().ОписаниеПлагина(ВозможныеТипыПлагинов);
КонецФункции
// } Plugin interface

// { API

// Установить шаблон регулярного выражения
//
// Параметры:
//  Шаблон	 - Строка - шаблон регулярного выражения
//
&НаКлиенте
Процедура Подготовить(Знач Шаблон) Экспорт
	Если ЭтоLinux Тогда
		ПодготовитьШаблонRexExpLinux(Шаблон);
	Иначе
		Если РегулярноеВыражение = Неопределено Тогда
			Попытка
				РегулярноеВыражение = Новый COMОбъект(""VBScript.RegExp"");
			Исключение
				ВызватьИсключение ""Не удалось создать COMОбъект - VBScript.RegExp"";
			КонецПопытки;
		КонецЕсли;

		РегулярноеВыражение.Global = Истина;
		РегулярноеВыражение.Pattern = Шаблон;
		
	КонецЕсли;
КонецПроцедуры

// Проверяет строку на соответствие подготовленному регулярному выражению
//
// Параметры:
//  ПроверяемаяСтрока	 - 	 - 
// 
// Возвращаемое значение:
//   Булево - соответствует или нет 
//
&НаКлиенте
Функция Совпадает(Знач ПроверяемаяСтрока) Экспорт
	ПроверитьПодготовленность();
	Возврат РегулярноеВыражение.Test(ПроверяемаяСтрока);
КонецФункции

// Позволяет проверить соответствие строки ""ПроверяемаяСтрока"" шаблону ""Шаблон""
//	при этом подстрока ""Шаблон"" может содержать символы *, который означает ""любые символы""
//	например СтрокаСоответствуетШаблону(""Привет"",""*вет"")
//
// Параметры:
//  ПроверяемаяСтрока	 - Строка	 - 
//  Шаблон				 - Строка	 - 
// 
// Возвращаемое значение:
//   Булево - соответствует или нет 
//
&НаКлиенте
Функция СтрокаСоответствуетШаблону(Знач ПроверяемаяСтрока, Знач Шаблон = """") Экспорт
	
	Если ЗначениеЗаполнено(Шаблон) Тогда
		Шаблон = ПодготовитьШаблонКИспользованиюВРегулярке(Шаблон);
		Если Не ЭтоLinux Тогда
			//для VBScript.RegExp явно указываем что есть начало и конец строки
			Шаблон            = ""^"" + Шаблон + ""$"";
		КонецЕсли;
		
		Подготовить(Шаблон);
	КонецЕсли;

	ПроверитьПодготовленность();
	
	Если ЭтоLinux Тогда
		Возврат ПроверитьСтрокуRexExpLinux(ПроверяемаяСтрока);
	Иначе
		Возврат РегулярноеВыражение.Test(ПроверяемаяСтрока);
	КонецЕсли;
КонецФункции

// Подготовить шаблон к использованию в регулярке путем экранирования служебных символов
//	Важно: Символ * в шаблоне трактуется как выражение .+ (любой символ)
//
// Параметры:
//  Шаблон	 - Строка - строка регулярного выражения без экранирования 
// 
// Возвращаемое значение:
//   Строка - подготовленный шаблон регулярного выражения с добавлением экранирования и заменой * 
//
&НаКлиенте
Функция ПодготовитьШаблонКИспользованиюВРегулярке(Знач Шаблон) Экспорт

	// Экранируем все, кроме звездочки. Ее будем трактовать по-своему.
	СпецСимволы = Новый Массив;
	СпецСимволы.Добавить(""\"");
	СпецСимволы.Добавить(""^"");
	СпецСимволы.Добавить(""$"");
	СпецСимволы.Добавить(""("");
	СпецСимволы.Добавить("")"");
	СпецСимволы.Добавить(""<"");
	СпецСимволы.Добавить(""["");
	СпецСимволы.Добавить(""]"");
	СпецСимволы.Добавить(""{"");
	СпецСимволы.Добавить(""}"");
	СпецСимволы.Добавить(""|"");
	СпецСимволы.Добавить("">"");
	СпецСимволы.Добавить(""."");
	СпецСимволы.Добавить(""+"");
	СпецСимволы.Добавить(""?"");

	Для Каждого СпецСимвол Из СпецСимволы Цикл
		Шаблон = СтрЗаменить(Шаблон, СпецСимвол, ""\"" + СпецСимвол);
	КонецЦикла;

	// Трактуем * по-нашему.
	Шаблон = СтрЗаменить(Шаблон, ""*"", "".+"");

	Возврат Шаблон;

КонецФункции

// } API

// { Helpers
&НаСервере
Функция ЭтотОбъектНаСервере()
	Возврат РеквизитФормыВЗначение(""Объект"");
КонецФункции

&НаКлиенте
Процедура ПроверитьПодготовленность()
	Если ЭтоLinux Тогда
		Значение = ТестерЛинукс;
	Иначе 
		Значение = РегулярноеВыражение;
	КонецЕсли;
	Ожидаем.Что(Значение <> Неопределено, 
		""Ожидали, что регулярное выражение подготовлено, а это не так"")
		.ЭтоИстина();
КонецПроцедуры

//взято из https://infostart.ru/public/464971/
&НаКлиенте
Функция ПроверитьСтрокуRexExpLinux(Знач Строка)
	
    Попытка
        ТестерЛинукс.TestItem = Строка;
        Возврат Истина
    Исключение
        Возврат Ложь
    КонецПопытки;
КонецФункции

//взято из https://infostart.ru/public/464971/
&НаКлиенте
Функция ПодготовитьШаблонRexExpLinux(Знач Шаблон)
    Чтение = Новый ЧтениеXML;
    Чтение.УстановитьСтроку(
                ""<Model xmlns=""""http://v8.1c.ru/8.1/xdto"""" xmlns:xs=""""http://www.w3.org/2001/XMLSchema"""" xmlns:xsi=""""http://www.w3.org/2001/XMLSchema-instance"""" xsi:type=""""Model"""">
                |<package targetNamespace=""""sample-my-package"""">
                |<valueType name=""""testtypes"""" base=""""xs:string"""">
                |<pattern>"" + Шаблон + ""</pattern>
                |</valueType>
                |<objectType name=""""TestObj"""">
                |<property xmlns:d4p1=""""sample-my-package"""" name=""""TestItem"""" type=""""d4p1:testtypes""""/>
                |</objectType>
                |</package>
                |</Model>"");

    Модель = ФабрикаXDTO.ПрочитатьXML(Чтение);
    МояФабрикаXDTO = Новый ФабрикаXDTO(Модель);
    Пакет = МояФабрикаXDTO.Пакеты.Получить(""sample-my-package"");
    ТестерЛинукс = МояФабрикаXDTO.Создать(Пакет.Получить(""TestObj""));
	
	Возврат ТестерЛинукс;
КонецФункции

// } Helpers
",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",85629dd2-6be4-49c6-9a69-13411102aa57}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0},0,0}