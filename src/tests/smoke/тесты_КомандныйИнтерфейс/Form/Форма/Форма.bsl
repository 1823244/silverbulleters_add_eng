
&НаКлиенте
Перем КонтекстЯдра;

&НаКлиенте
Перем Утверждения;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Инициализация(ПолучитьФорму("ВнешняяОбработка.xddTestRunner.Форма"));
	
	ТестКлиент = Неопределено;
	Попытка
		ТестКлиент = КонтекстЯдра.Плагин("ТестКлиенты").ТестКлиентПоУмолчанию();
	Исключение
	    ИнфоОшибки = ИнформацияОбОшибке();// ОписаниеОшибки()
		Сообщить(ИнфоОшибки.Описание);
		Возврат;
	КонецПопытки;
	
	Если ТестКлиент <> Неопределено Тогда
		Для Каждого КлючЗначение Из ОписаниеДобавляемыхТестов(ТестКлиент) Цикл
			Описание = КлючЗначение.Значение;
			НоваяСтрока = КнопкиКомандногоИнтерфейса.Добавить();
			НоваяСтрока.ПредставлениеТеста = Описание.ПредставлениеТеста;
			НоваяСтрока.НавигационнаяСсылка = Описание.НавигационнаяСсылка;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов, КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	ТестКлиент = Неопределено;
	Попытка
		ТестКлиент = КонтекстЯдра.Плагин("ТестКлиенты").ТестКлиентПоУмолчанию();
	Исключение
	    ИнфоОшибки = ИнформацияОбОшибке();// ОписаниеОшибки()
		Сообщить(ИнфоОшибки.Описание);
		Возврат;
	КонецПопытки;
	
	Если ТестКлиент <> Неопределено Тогда
		Для Каждого КлючЗначение Из ОписаниеДобавляемыхТестов(ТестКлиент) Цикл
			Описание = КлючЗначение.Значение;
			НаборТестов.Добавить(
			Описание.ИмяТеста,
			НаборТестов.ПараметрыТеста(Описание.НавигационнаяСсылка),
			Описание.ПредставлениеТеста);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
	
	ЗакрытьВсеОткрытыеОкна();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт
	
	//ЗакрытьВсеОткрытыеОкна();
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеДобавляемыхТестов(ТестКлиент)
	
	РезКоллекцияОписаний = Новый Соответствие;
	
	ОсновноеОкно = ОсновноеОкно(ТестКлиент);
	Попытка
		КомандныйИнтерфейс = ОсновноеОкно.ПолучитьКомандныйИнтерфейс();
	Исключение
		ВызватьИсключение "Не удалось получить командный интерфейс.
		|Возможно, сеанс тест-клиента заблокирован модальным окном";
	КонецПопытки;
	ПанельРазделов = КомандныйИнтерфейс.НайтиОбъект(Тип("ТестируемаяГруппаКомандногоИнтерфейса"), НСтр("ru = 'Панель разделов'"));
	Для Каждого ТекКнопкаРаздел Из ПанельРазделов.НайтиОбъекты(Тип("ТестируемаяКнопкаКомандногоИнтерфейса")) Цикл
		ТекКнопкаРаздел.Нажать();
		ДобавитьОписаниеТеста(РезКоллекцияОписаний, КомандныйИнтерфейс, ТекКнопкаРаздел.ТекстЗаголовка);
		ТекКнопкаРаздел.Нажать();
	КонецЦикла;
	
	Возврат РезКоллекцияОписаний;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьОписаниеТеста(КоллекцияОписанийТестов, КомандныйИнтерфейс, ТекстЗаголовка)
	
	Для Каждого ТекРаздел Из КомандныйИнтерфейс.НайтиОбъекты(Тип("ТестируемаяГруппаКомандногоИнтерфейса")) Цикл
		
		Если ЭтоСлужебныйРаздел(ТекРаздел) Тогда 
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекКнопка Из ТекРаздел.ПолучитьПодчиненныеОбъекты() Цикл
			ДобавляемоеОписание = Новый Структура;
			ДобавляемоеОписание.Вставить("ПредставлениеТеста", КонтекстЯдра.СтрШаблонКлиент("%1_%2_%3", ТекстЗаголовка, ТекРаздел.ТекстЗаголовка, ТекКнопка.ТекстЗаголовка));
			ДобавляемоеОписание.Вставить("НавигационнаяСсылка", ТекКнопка.НавигационнаяСсылка);
			ДобавляемоеОписание.Вставить("ИмяТеста", ИмяТеста(ТекКнопка.НавигационнаяСсылка));
			КоллекцияОписанийТестов.Вставить(ТекКнопка.НавигационнаяСсылка, ДобавляемоеОписание);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ИмяТеста(ПараметрНавигационнаяСсылка)
	
	ПропускаемыеНавигационныеСсылки = Новый Массив;
	ПропускаемыеНавигационныеСсылки.Добавить("e1cib/command/ОбщаяКоманда.СтраницаМобильноеПриложениеНаAppStore");
	ПропускаемыеНавигационныеСсылки.Добавить("e1cib/command/ОбщаяКоманда.СтраницаМобильноеПриложениеНаGooglePlay");
	ПропускаемыеНавигационныеСсылки.Добавить("e1cib/command/ОбщаяКоманда.СтраницаПродуктаНаСайте1С");
	ПропускаемыеНавигационныеСсылки.Добавить("e1cib/command/ОбщаяКоманда.СтраницаЧтоНовогоВВерсииВидео");
	
	Если ПропускаемыеНавигационныеСсылки.Найти(ПараметрНавигационнаяСсылка) = Неопределено Тогда
		Возврат "ТестДолжен_ПерейтиПоКнопкеКомандногоИнтерфейса";
	Иначе
		Возврат "ТестДолжен_ПропуститьВыполнение";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ЭтоСлужебныйРаздел(ГруппаКомандногоИнтерфейса)
	
	ЗаголовкиСлужебныхРазделов = Новый Массив;
	ЗаголовкиСлужебныхРазделов.Добавить(НСтр("ru = 'Панель разделов'"));
	ЗаголовкиСлужебныхРазделов.Добавить(НСтр("ru = 'Панель инструментов'"));
	ЗаголовкиСлужебныхРазделов.Добавить(НСтр("ru = 'Панель открытых'"));
	ЗаголовкиСлужебныхРазделов.Добавить(НСтр("ru = 'Меню функций'"));
	ЗаголовкиСлужебныхРазделов.Добавить(НСтр("ru = 'Панель функций текущего раздела'"));
	
	Для Каждого ТекЗаголовок Из ЗаголовкиСлужебныхРазделов Цикл
		Если НРег(ГруппаКомандногоИнтерфейса.ТекстЗаголовка) = НРег(ТекЗаголовок) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура КнопкиКомандногоИнтерфейсаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПередЗапускомТеста();
	ТестДолжен_ПерейтиПоКнопкеКомандногоИнтерфейса(Элементы.КнопкиКомандногоИнтерфейса.ТекущиеДанные.НавигационнаяСсылка);
	ПослеЗапускаТеста();
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПропуститьВыполнение(ПараметрНавигационнаяСсылка) Экспорт
	
	КонтекстЯдра.ПропуститьТест();
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПерейтиПоКнопкеКомандногоИнтерфейса(ПараметрНавигационнаяСсылка) Экспорт
	
	ТестКлиент = КонтекстЯдра.Плагин("ТестКлиенты").ТестКлиентПоУмолчанию();
	ОсновноеОкно = ОсновноеОкно(ТестКлиент);
	Попытка
		ОсновноеОкно.ВыполнитьКоманду(ПараметрНавигационнаяСсылка);
	Исключение
		ВызватьИсключение КонтекстЯдра.СтрШаблонКлиент("Не удалось выполнить команду %1 на тест-клиенте.
		|Возможно, сеанс тест-клиента заблокирован модальным окном", ПараметрНавигационнаяСсылка);
	КонецПопытки;
	
	ИдентифицироватьОкноПредупреждение(ПереходПоКнопкеКомандногоИнтерфейса(), ТестКлиент);
	
	ОписанияШаговСценария = Новый Массив;
	ОписанияШаговСценария.Добавить(КликПоПервойСтрокеТаблицыФормы());
	ОписанияШаговСценария.Добавить(КликПоПоследнейСтрокеТаблицыФормы());
	
	ОкноСТаблицейФормы= ТестКлиент.ПолучитьАктивноеОкно();
	
	Для Каждого ШагСценария Из ОписанияШаговСценария Цикл
		Обработали = ВыполнитьШагПроверкиТаблицыФормы(ОкноСТаблицейФормы, ШагСценария, ТестКлиент);
		Если Обработали Тогда
			ИдентифицироватьОкноПредупреждение(ШагСценария, ТестКлиент);
		КонецЕсли;
	КонецЦикла;
	
	ЗакрытьВсеОткрытыеОкна();
	
	ОткрытыеОкна = ТестКлиент.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
	Для Каждого ТекОкно Из ОткрытыеОкна Цикл
		Если ПропуститьОкно(ТекОкно) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекОкно <> Неопределено Тогда
			ТекстИсключения = КонтекстЯдра.СтрШаблонКлиент("Выявлено окно, которое не закрывается!
			|Возможно, это модальное окно.
			|Заголовок окна <%1>", ТекОкно.Заголовок);
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьШагПроверкиТаблицыФормы(ОкноСТаблицейФормы, ШагСценария, ТестКлиент)
	
	ТаблицаФормы = ОкноСТаблицейФормы.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"));
	Если ТаблицаФормы = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ТаблицаФормы.ТекущаяДоступность() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ТаблицаФормы.ТекущаяВидимость() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПерейтиКЗаданнойСтрокеТаблицыФормы(ШагСценария, ТаблицаФормы, ТестКлиент);
	
	Если Не ЗначениеЗаполнено(ТаблицаФормы.ПолучитьВыделенныеСтроки()) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТаблицаФормы.Выбрать();
	
	ИдентифицироватьОкноПредупреждение(ШагСценария, ТестКлиент);
	
	ТекущееОкно = ТестКлиент.ПолучитьАктивноеОкно();
	Если ПриКликеВТаблицеФормыНовоеОкноНеОткрылось(ТекущееОкно, ОкноСТаблицейФормы) Тогда
		Возврат Истина;
	КонецЕсли;
	
	НажатьКнопкуЗаписать(ШагСценария, ТекущееОкно, ТестКлиент);
	
	ТекущееОкно.Закрыть();
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПерейтиКЗаданнойСтрокеТаблицыФормы(ШагСценария, ТаблицаФормы, ТестКлиент)
	
	Если ШагСценария = КликПоПервойСтрокеТаблицыФормы() Тогда
		
		ТаблицаФормы.ПерейтиКПервойСтроке();
		
	ИначеЕсли ШагСценария = КликПоПоследнейСтрокеТаблицыФормы() Тогда
		
		ТаблицаФормы.ПерейтиКПоследнейСтроке();
		
	Иначе
		
		ВызватьИсключение КонтекстЯдра.СтрШаблонКлиент("Поведение для шага ""%1"" не определено", ШагСценария);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПриКликеВТаблицеФормыНовоеОкноНеОткрылось(ТекущееОкно, ОкноСТаблицейФормы)
	
	Возврат ТекущееОкно = ОкноСТаблицейФормы;
	
КонецФункции

&НаКлиенте
Процедура НажатьКнопкуЗаписать(ШагСценария, ТекущееОкно, ТестКлиент)
	
	КнопкаЗаписать = ТекущееОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"), "Записать");
	Если КнопкаЗаписать = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не КнопкаЗаписать.ТекущаяВидимость() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не КнопкаЗаписать.ТекущаяДоступность() Тогда
		Возврат;
	КонецЕсли;
	
	КнопкаЗаписать.Нажать();
	
	ИдентифицироватьОкноПредупреждение(
	КонтекстЯдра.СтрШаблонКлиент("%1: Кнопка ""Записать""", ШагСценария),
	ТестКлиент);
	
КонецПроцедуры

&НаКлиенте
Функция ПереходПоКнопкеКомандногоИнтерфейса()
	
	Возврат "Переход по кнопке командного интерфейса";
	
КонецФункции

&НаКлиенте
Функция КликПоПервойСтрокеТаблицыФормы()
	
	Возврат "Клик по первой строке таблицы формы";
	
КонецФункции

&НаКлиенте
Функция КликПоПоследнейСтрокеТаблицыФормы()
	
	Возврат "Клик по последней строке таблицы формы";
	
КонецФункции

&НаКлиенте
Процедура ИдентифицироватьОкноПредупреждение(ШагСценария, ТестКлиент)
	
	ОкноПредупреждение = ТестКлиент.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"), "1С:Предприятие");
	Если ТипЗнч(ОкноПредупреждение) <> Тип("ТестируемоеОкноКлиентскогоПриложения") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстИсключения = ТекстИсключения(ОкноПредупреждение);
	ЗакрытьВсеОткрытыеОкна();
	
	ТекстИсключения = КонтекстЯдра.СтрШаблонКлиент("Выявлено модальное окно:
		|[%1] %2", ШагСценария, ТекстИсключения);

	КонтекстЯдра.ВызватьОшибкуПроверки(ТекстИсключения);
	
КонецПроцедуры

&НаКлиенте
Функция ТекстИсключения(ОкноПредупреждение)
	
	ТекстыЗаголовков = Новый Массив;
	Для Каждого ТекОбъект Из ОкноПредупреждение.НайтиОбъекты(Тип("ТестируемоеПолеФормы")) Цикл
		ТекстыЗаголовков.Добавить(ТекОбъект.ТекстЗаголовка);
	КонецЦикла;
	
	Возврат СтрСоединить_(ТекстыЗаголовков, " ");
	
КонецФункции

&НаКлиенте
Функция ОсновноеОкно(ТестКлиент)
	
	Для Каждого ТестируемоеОкно Из ТестКлиент.ПолучитьПодчиненныеОбъекты() Цикл
		Если ТестируемоеОкно.Основное Тогда
			Возврат ТестируемоеОкно;
		КонецЕсли;
	КонецЦикла;
	
	ВызватьИсключение "Не удалось найти основное окно";
КонецФункции

&НаКлиенте
Процедура ЗакрытьВсеОткрытыеОкна()
	
	ТестКлиент = КонтекстЯдра.Плагин("ТестКлиенты").ТестКлиентПоУмолчанию();
	
	ОкноПредупреждение = ТестКлиент.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"), НСтр("ru = '1С:Предприятие'"));
	НажатьПодходящуюКнопку(ОкноПредупреждение);
	
	ОткрытыеОкна = ТестКлиент.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
	Для Каждого ТекОкно Из ОткрытыеОкна Цикл
		Если ПропуститьОкно(ТекОкно) Тогда
			Продолжить;
		КонецЕсли;

		ТекОкно.Закрыть();
		
		Если ТипЗнч(ТекОкно) = Тип("ТестируемоеОкноКлиентскогоПриложения") И ТекОкно.Заголовок = НСтр("ru = '1С:Предприятие'") Тогда
			НажатьПодходящуюКнопку(ТекОкно);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПропуститьОкно(ТекОкно)
	Если ТекОкно.Основное Или ТекОкно.НачальнаяСтраница Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура НажатьПодходящуюКнопку(ОкноПриложения)
	
	Если ТипЗнч(ОкноПриложения) <> Тип("ТестируемоеОкноКлиентскогоПриложения") Тогда
		Возврат;
	КонецЕсли;
	
	Кнопки = ОкноПриложения.НайтиОбъекты(Тип("ТестируемаяКнопкаФормы"));
	Если Не ЗначениеЗаполнено(Кнопки) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПолеФормы Из ОкноПриложения.НайтиОбъекты(Тип("ТестируемоеПолеФормы")) Цикл
		Если СтрНачинаетсяС(НРег(ПолеФормы.ТекстЗаголовка), "данные были изменены") Тогда
			Кнопки[1].Нажать();
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Кнопки[0].Нажать();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрСоединить_(МассивЭлементов, Символ = "") Экспорт
	СтрокаРезультат = "";
	Если МассивЭлементов.Количество() > 0 Тогда
		СтрокаРезультат = МассивЭлементов.Получить(0) + Символ;
		Для сч = 0 по МассивЭлементов.ВГраница() Цикл
			Элемент = МассивЭлементов.Получить(сч);
			Если ЗначениеЗаполнено(Элемент) Тогда
				СтрокаРезультат = МассивЭлементов.Получить(сч) + Символ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат СтрокаРезультат;

КонецФункции

